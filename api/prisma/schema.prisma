generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
}

enum Role {
  MANAGER
  INSTRUCTOR
  STUDENT
}

enum TypeOfGraduation {
  BELT
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

model User {
  id               String        @id @default(uuid())
  name             String
  email            String        @unique
  authToken        String?       @map("auth_token")
  profilePhotoUrl  String?       @map("profile_photo_url")
  authorized       Boolean
  birth            DateTime
  gender           Gender
  updatedAt        DateTime      @updatedAt
  createdAt        DateTime      @default(now())
  userRoles        UserRole[]
  password         String
  gym              Gym?
  graduations      Graduation[]
  stripeCustomerId String?       @map("stripe_customer_id")
  TrainingGym      TrainingGym[]
  Class            Class[]

  @@map("users")
}

model UserRole {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")
  role   Role

  @@map("user_roles")
}

model Gym {
  id          String        @id @default(uuid())
  name        String
  address     String
  since       DateTime?
  logo        String
  managerId   String        @unique @map("manager_id")
  manager     User          @relation(fields: [managerId], references: [id])
  TrainingGym TrainingGym[]
  Class       Class[]

  @@map("gyms")
}

model Modality {
  id               String            @id @default(uuid())
  name             String
  type             TypeOfGraduation
  graduationColors GraduationColor[]
  Class            Class[]

  @@map("modalities")
}

model GraduationColor {
  id          String       @id @default(uuid())
  name        String
  modalityId  String       @map("modality_id")
  modality    Modality     @relation(fields: [modalityId], references: [id])
  graduations Graduation[]

  @@map("graduation_colors")
}

model Graduation {
  id        String          @id @default(uuid())
  extraInfo String?         @map("extra_info")
  colorId   String          @map("color_id")
  color     GraduationColor @relation(fields: [colorId], references: [id])
  userId    String          @map("user_id")
  user      User            @relation(fields: [userId], references: [id])

  @@map("graduations")
}

model TrainingGym {
  id        String    @id @default(uuid())
  user      User      @relation(fields: [userId], references: [id])
  userId    String    @map("user_id")
  gym       Gym       @relation(fields: [gymId], references: [id])
  gymId     String    @map("gym_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("training_gyms")
}

model Class {
  id          String    @id @default(uuid())
  name        String
  description String
  timeStart   DateTime  @map("time_start")
  timeEnd     DateTime  @map("time_end")
  dayOfWeek   DayOfWeek @map("day_of_week")
  gym         Gym       @relation(fields: [gymId], references: [id])
  instructor  User      @relation(fields: [userId], references: [id])
  address     String
  modality    Modality  @relation(fields: [modalityId], references: [id])
  active      Boolean
  gymId       String    @map("gym_id")
  userId      String    @map("user_id")
  modalityId  String    @map("modality_id")

  @@map("classes")
}
